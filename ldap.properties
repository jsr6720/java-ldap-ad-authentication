# The MIT License (MIT)
# Copyright (c) 2012 James Rowe

# This is a config file for specifing some generic information
# about the LDAP/AD location to avoid recompiling the source code

# most of these key=value pairs use a Context.<name> as a key

INITIAL_CONTEXT_FACTORY=com.sun.jndi.ldap.LdapCtxFactory

# expecting 'AD' or 'LDAP' easy switch over if neccessary
PROVIDER_TYPE=AD

# space separated values for more than one ldap server
# automatic failover
LDAP_PROVIDER_URL=ldap://www.example.com:389 ldap://www.example2.com:389
AD_PROVIDER_URL=ldap://ad01.example.com ldap://ad02.example.com
AD_DOMAIN=example.com

# supports none, simple, strong
SECURITY_AUTHENTICATION=simple

# provide basic read only user for binding and searching
AD_ANON_BIND_UNAME=username
AD_ANON_BIND_PWORD=password

# "what" are we authenticating with.
# What attribute name to look for keyfob id under
ATTRIBUTE_NAME_KEYFOB_ID=serialNumber
# where to check for username as typed in at login window
ATTRIBUTE_NAME_UNAME=sAMAccountName

# start a name with the base DN (where all LDAP objs are)
LDAP_BASE_DN=dc=server,dc=com,dc=project
AD_BASE_DN=dc=com,dc=project

# Name other Locations
# TRAILING COMMA REQUIRED. so LDAP_USERS_LOC + BASE_DN = fully qualified name
# allows for ease of sub directory traversing if needed in the future

# from BASE_DN where are all users stored
LDAP_USERS_LOC=cn=users,
AD_USERS_LOC=cn=Users,

# from BASE_DN where are all the groups
LDAP_GROUPS_LOC=cn=groups,
AD_GROUPS_LOC=ou=Groups,

### In case of LDAP communication failure (or manual override, say for local development)
LDAP_OVERRIDE=false
LDAP_OVERRIDE_UNAME=dev
LDAP_OVERRIDE_PWORD=user

### IMPORTANT: All group names need to start with "GROUP_" that is how the 
### java class knows what groups to authenticate for. IE it goes though all
### the file's attributes, looks for GROUP_ the value is the group name in LDAP
### ALSO: key=value pairs are used in RoleManager.as to verify. So if add/change
### KEY here don't forget to update there

### Right side (value) is group name in LDAP/AD server
### So java uses the "GROUP_" key/values in a HashMap and verifies the user 
### is in the LDAP/AD group (value) and assigns a boolean to the key
### returned as an object to actionscript
### This allows us to change the LDAP group name without recompiling code
### and links the LDAP name and application group name in this spot only

# development group to test all features
GROUP_DEVELOPERS=developers

# this is the only group that will be able to open and perform
# administrative tasks
GROUP_ADMINISTRATION=administrators
